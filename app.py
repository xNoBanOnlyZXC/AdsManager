from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery, InputMediaPhoto, BotCommand, BotCommandScope
from models import Base, Ad, LastAds, Settings
from pyrogram import Client, filters, enums
from sqlalchemy.orm import sessionmaker
import os, json, asyncio, pyrofix, time, re
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
from datetime import datetime
from io import BytesIO

# 0 / 1
TESTMODE = 0

API_ID = 0
API_HASH = 'hash'

TOKEN = [
    'main bot token',
    'test bot token'
][TESTMODE]

CHAT_IDS = [
    [-100], # main
    [-100]  # test
][TESTMODE]

NAME = [
    "main",
    "test"
][TESTMODE]

ADMINS = [
    [], # basic
    []  # test
][TESTMODE]

MAX_ADS = 5

# SQLAlchemy setup
engine = create_engine(f'sqlite:///{NAME}.db')
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

bot = Client(NAME, api_id=API_ID, api_hash=API_HASH, bot_token=TOKEN)

user_states = {} 
lock = False

# region admin_only(func)
def admin_only(func):
    async def wrapper(client: Client, message: Message):
        if message.from_user.id in ADMINS:
            return await func(client, message)
        else:
            msg = await client.send_message(message.chat.id, "üö´ Admin only", reply_to_message_id=message.id)
            await asyncio.sleep(1)
            await msg.delete()
        await new_message(client, message)
    return wrapper

# region testmode_only(func)
def testmode_only(func):
    async def wrapper(client: Client, message: Message):
        if TESTMODE:
            return await func(client, message)
        else:
            msg = await client.send_message(message.chat.id, "üö´ In test only", reply_to_message_id=message.id)
            await asyncio.sleep(1)
            await msg.delete()
        await new_message(client, message)
    return wrapper

# region pm_only(func)
def pm_only(func):
    async def wrapper(client: Client, message: Message):
        if message.chat.type == enums.ChatType.PRIVATE:
            return await func(client, message)
        else:
            msg = await client.send_message(message.chat.id, "üö´ PM only", reply_to_message_id=message.id)
            await asyncio.sleep(1)
            await msg.delete()
        await new_message(client, message)
    return wrapper

# region send_ads()
async def send_ads():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —á–∞—Ç—ã."""
    with SessionLocal() as db:
        ads_from_db = db.query(Ad).all()
        for CHAT_ID in CHAT_IDS:
            last_ads_in_chat = []
            for ad in ads_from_db:
                ad_buttons = []
                if ad.referrer:
                    if ad.referrer:
                        if ad.referrer.startswith("+"):
                            ref = ad.referrer[:5]+'*****'+ad.referrer[10:]
                        else:
                            ref = "@"+ad.referrer
                        ad_buttons.append([InlineKeyboardButton(f"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å ({ref})", url=f"https://t.me/{ad.referrer}")])
                        if ad.referrer.startswith("+"):
                            ad_buttons.append([InlineKeyboardButton(f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å ({ref})", url=f"https://t.me/{bot.me.username}?start=contact_ad_{ad.id}")])

                reply_markup = InlineKeyboardMarkup(ad_buttons) if ad_buttons else print("no refferer found, wtf")

                try:
                    if ad.photos:
                        media_group = [InputMediaPhoto(media=photo['file_id']) for photo in ad.photos]
                        if media_group:
                            media_group[0].caption = ad.text
                            sent_messages = await bot.send_media_group(chat_id=CHAT_ID, media=media_group)
                            if reply_markup and sent_messages:
                                await sent_messages[0].edit_reply_markup(reply_markup=reply_markup)
                            last_ads_in_chat.extend([msg.id for msg in sent_messages])
                    else:
                        sent_message = await bot.send_message(chat_id=CHAT_ID, text=ad.text, reply_markup=reply_markup)
                        last_ads_in_chat.append(sent_message.id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (ID: {ad.id}) –≤ —á–∞—Ç {CHAT_ID}: {e}")
                    raise
            
            last_ad_entry = db.query(LastAds).filter(LastAds.chat_id == CHAT_ID).first()
            if last_ad_entry:
                last_ad_entry.messages = last_ads_in_chat
            else:
                new_last_ad_entry = LastAds(chat_id=CHAT_ID, messages=last_ads_in_chat)
                db.add(new_last_ad_entry)
            db.commit()

# region delete_old_ads()
async def delete_old_ads():
    """Deletes previously sent ads from all tracked chats based on LastAds data."""
    with SessionLocal() as db:
        for CHAT_ID in CHAT_IDS:
            last_ads_entry = db.query(LastAds).filter(LastAds.chat_id == CHAT_ID).first()
            if last_ads_entry and last_ads_entry.messages:
                for message_id in last_ads_entry.messages:
                    try:
                        await bot.delete_messages(chat_id=CHAT_ID, message_ids=message_id)
                    except Exception as e:
                        print(f"Error deleting message {message_id} in chat {CHAT_ID}: {e}")
                db.delete(last_ads_entry)
                db.commit()

# region ADMINME
@bot.on_message(filters.command("adminme"))
@testmode_only
async def adminme(client: Client, message: Message):
    if message.from_user.id not in ADMINS:
        ADMINS.append(message.from_user.id)
        msg = await client.send_message(message.chat.id, "‚úÖ Done", reply_to_message_id=message.id)
        await asyncio.sleep(2)
        await msg.delete()
    else:
        msg = await client.send_message(message.chat.id, "üö´ You already admin", reply_to_message_id=message.id)
        await asyncio.sleep(2)
        await msg.delete()
    await new_message(client, message)

# region UNADMINME
@bot.on_message(filters.command("unadminme"))
@testmode_only
@admin_only
async def unadminme(client: Client, message: Message):
    if message.from_user.id in ADMINS:
        ADMINS.remove(message.from_user.id)
        msg = await client.send_message(message.chat.id, "‚úÖ Done", reply_to_message_id=message.id)
        await asyncio.sleep(2)
        await msg.delete()
    else:
        msg = await client.send_message(message.chat.id, "üö´ You are not an admin", reply_to_message_id=message.id)
        await asyncio.sleep(2)
        await msg.delete()
    await new_message(client, message)

# region DEL
@bot.on_message(filters.command("del"))
@admin_only
@pm_only
async def del_message_command(client: Client, message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("Use: `del <chat_id> <msg_id>`")
        chat = int(parts[1])
        msg_id = int(parts[2])
    except (IndexError, ValueError):
        return await message.reply("Use: `del <chat_id> <msg_id>`")

    if chat not in CHAT_IDS:
        await message.reply(f"Chat `{chat}` not in `CHAT_IDS` list.")
        return
    try:
        await client.delete_messages(chat_id=chat, message_ids=msg_id)
        await message.reply("Message deleted.")
    except Exception as e:
        await message.reply(f"Error deleting message: {e}")

# region GET
@bot.on_message(filters.command("get"))
@pm_only
@admin_only
async def get_message_data_command(client: Client, message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("Use: `get <chat_id> <msg_id>`")
        chat = int(parts[1])
        msg_id = int(parts[2])
    except (IndexError, ValueError):
        return await message.reply("Use: `get <chat_id> <msg_id>`")
    
    if chat not in CHAT_IDS:
        await message.reply(f"Chat `{chat}` not in `CHAT_IDS` list.")
        return

    try:
        target_message = await client.get_messages(chat, msg_id)
    except Exception as e:
        return await message.reply(f"No message with id: {e}")

    def serialize(obj):
        if isinstance(obj, (str, int, float, bool, type(None))):
            return obj
        elif isinstance(obj, (list, tuple)):
            return [serialize(item) for item in obj]
        elif isinstance(obj, dict):
            return {k: serialize(v) for k, v in obj.items() if not k.startswith("_")}
        elif hasattr(obj, "__dict__"):
            return serialize(obj.__dict__)
        else:
            try:
                return str(obj)  # fallback
            except:
                return "<unserializable>"

    clean_data = serialize(target_message)

    file_io = BytesIO()
    file_io.name = "get.json"
    file_io.write(json.dumps(clean_data, indent=2, ensure_ascii=False).encode("utf-8"))
    file_io.seek(0)

    await message.reply_document(file_io, caption=f"Message [#{msg_id}](https://t.me/c/{str(chat).lstrip('-100')}/{msg_id})")

# region START
@bot.on_message(filters.command("start"))
@pm_only
async def start_command(client: Client, message: Message):
    command_parts = message.command if message.command else []
    ad_id = -1
    if len(command_parts) > 1 and command_parts[0] == "start" and command_parts[1].startswith("contact_ad_"):
        try:
            ad_id = int(command_parts[1].split('_')[2])
            with SessionLocal() as db:
                ad = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad and ad.referrer and re.match(r"^\+7\d{10}$", ad.referrer):
                    response_text = f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è \"__{ad.text.splitlines()[0]}__\": {ad.referrer}\n\n"
                    if ad.referrer_comment:
                        response_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: __{ad.referrer_comment}__\n\n"
                    response_text += f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å/–ø–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é"

                    await message.reply(
                        response_text,
                        disable_web_page_preview=True
                    )
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                user = message.from_user
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={user.id}")],
                    [InlineKeyboardButton("üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=f'ad_view_{ad_id}')]
                ])
                for admin_id in ADMINS:
                    try:
                        st = str(ad.id)+' | __'+ad.text.splitlines()[0]+'__' if ad_id != -1 else ''
                        await client.send_message(admin_id, f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é:\n{st}\n{'‚≠ê ' if user.is_premium else ''}{user.first_name} {user.last_name or ''}{' // @'+user.username+' // ' if user.username else ' // '}`{user.id}`", reply_markup=keyboard)
                    except Exception as e:
                        print(f"Could not send start message to admin {admin_id}: {e}")
            return
        except (ValueError, IndexError):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

    if message.from_user.id in ADMINS:
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n// Creator: @NoBanOnlyZXC')
    else:
        user = message.from_user
        await message.reply(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n(ad) üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤–Ω–∏–∑—É —á–∞—Ç–∞ –∑–∞ 200—Ä—É–± / –¥–µ–Ω—å")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={user.id}")]
        ])
        for admin_id in ADMINS:
            try:
                await client.send_message(admin_id, f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start\n{'‚≠ê ' if user.is_premium else ''}{user.first_name} {user.last_name or ''}{' // @'+user.username+' // ' if user.username else ' // '}`{user.id}`", reply_markup=keyboard)
            except Exception as e:
                print(f"Could not send start message to admin {admin_id}: {e}")

# region AD
@bot.on_message(filters.command("ad") & filters.reply)
@pm_only
@admin_only
async def add_ad_command(client: Client, message: Message):
    reply_to = message.reply_to_message
    if reply_to:
        photos = []
        text = ''
        
        if reply_to.media_group_id:
            mg = await reply_to.get_media_group()
            for pic in mg:
                photos.append({'file_id': pic.photo.file_id})
                text = pic.caption if pic.caption else (pic.text if pic.text else text)

        elif reply_to.photo:
            photo = reply_to.photo.file_id
            photos = [{'file_id': photo}]
            text = reply_to.caption if reply_to.caption else (reply_to.text if reply_to.text else text)
        elif reply_to.text:
            text = reply_to.text
        
        if not text and not photos:
            await message.reply("The replied message must contain text or a photo.")
            return

        referrer = None
        referrer_comment = None 
        original_text_lines = text.splitlines()

        if original_text_lines and original_text_lines[-2].strip().startswith("# "):
            referrer_comment = original_text_lines[-2].strip()[2:].strip()
            original_text_lines = original_text_lines[:-2]

        if original_text_lines:
            last_line = text.splitlines()[-1].strip()
            print(last_line)

            if last_line.startswith("@"):
                referrer = last_line[1:]
                original_text_lines = original_text_lines[:-1] # Remove username line from text
            elif last_line.startswith("+"):
                referrer = last_line

        text = "\n".join(original_text_lines).strip()

        with SessionLocal() as db:
            current_ads_count = db.query(Ad).count()
            if current_ads_count >= MAX_ADS:
                oldest_ad = db.query(Ad).order_by(Ad.date_added).first()
                if oldest_ad:
                    db.delete(oldest_ad)
                    db.commit()
            
            new_ad = Ad(
                text=text,
                photos=photos,
                referrer=referrer,
                referrer_comment=referrer_comment,
                admin_added=message.from_user.id
            )
            db.add(new_ad)
            db.commit()
            db.refresh(new_ad)

        await message.reply('–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        await send_ads()

# region ADS
@bot.on_message(filters.command("ads"))
@pm_only
@admin_only
async def ads_list_command(client: Client, message: Message):
    with SessionLocal() as db:
        ads_from_db = db.query(Ad).all()
        if len(ads_from_db) > 0:
            keyboard = InlineKeyboardMarkup([])
            for i, ad_item in enumerate(ads_from_db):
                marks = f'{"üë§" if ad_item.referrer else ""}{"üìù" if ad_item.referrer_comment else ""}{"üñºÔ∏è"*len(ad_item.photos) if ad_item.photos else ""}'
                t = (ad_item.text[:27] + '...') if ad_item.text and len(ad_item.text) > 27 else (ad_item.text or "No text")
                button_text = f'{marks} {" | " if marks else ""} {t}'
                keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f'ad_view_{ad_item.id}')])
            await message.reply('**–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞**\nüë§ - –ù–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\nüìù - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\nüñºÔ∏è - –ù–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫', reply_markup=keyboard)
        else:
            await message.reply('–ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã.')

# region call:ad_view
@bot.on_callback_query(filters.regex(r"^ad_view_(\d+)$"))
async def ad_view_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[2])
    
    try:
        if not callback_query.message.text.startswith("‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é"):
            await callback_query.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", show_alert=True)
        return

    with SessionLocal() as db:
        ad = db.query(Ad).filter(Ad.id == ad_id).first()
        if ad:
            kb1 = InlineKeyboardMarkup([
                [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É', callback_data=f'delete_ad_db_{ad_id}')],
                [InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É', callback_data=f'edit_ad_db_{ad_id}')],
                [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞', callback_data=f'ref_ad_db_{ad_id}')],
                [InlineKeyboardButton('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'edit_comment_ad_db_{ad_id}')]
            ])
            
            try:
                if ad.photos:
                    if isinstance(ad.photos, list) and ad.photos and 'file_id' in ad.photos[0]:
                        await client.send_photo(
                            chat_id=callback_query.message.chat.id,
                            photo=ad.photos[0]['file_id'],
                            caption=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                            reply_markup=kb1
                        )
                    else:
                        await client.send_message(
                            chat_id=callback_query.message.chat.id,
                            text=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–û—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ)",
                            reply_markup=kb1
                        )
                else:
                    await client.send_message(
                        chat_id=callback_query.message.chat.id,
                        text=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                        reply_markup=kb1
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã: {e}")
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É.")
                await client.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã: {e}"
                )
        else:
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# region call:delete_ad
@bot.on_callback_query(filters.regex(r"^delete_ad_db_(\d+)$"))
async def delete_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    with SessionLocal() as db:
        ad_to_delete = db.query(Ad).filter(Ad.id == ad_id).first()
        if ad_to_delete:
            db.delete(ad_to_delete)
            db.commit()
            await delete_old_ads()
            await send_ads()
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞")
            await callback_query.message.delete()
            
            ads_from_db = db.query(Ad).all()
            if len(ads_from_db) > 0:
                keyboard = InlineKeyboardMarkup([])
                for i, ad_item in enumerate(ads_from_db):
                    marks = f'{"üë§" if ad_item.referrer else ""}{"üìù" if ad_item.referrer_comment else ""}{"üñºÔ∏è"*len(ad_item.photos) if ad_item.photos else ""}'
                    t = (ad_item.text[:27] + '...') if ad_item.text and len(ad_item.text) > 27 else (ad_item.text or "No text")
                    button_text = f'{marks} {" | " if marks else ""} {t}'
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f'ad_view_{ad_item.id}')])
                await callback_query.message.reply('**–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞**\nüë§ - –ù–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\nüìù - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\nüñºÔ∏è - –ù–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫', reply_markup=keyboard)
            else:
                await callback_query.message.reply('–ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã.')
        else:
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            await callback_query.message.delete()

# region call:edit_ad
@bot.on_callback_query(filters.regex(r"^edit_ad_db_(\d+)$"))
@admin_only
async def edit_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    user_id = callback_query.from_user.id

    await callback_query.answer()
    user_states[user_id] = {"action": "edit_ad", "ad_id": ad_id, "message_id": callback_query.message.id}
    
    await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")

# region call:ref_ad
@bot.on_callback_query(filters.regex(r"^ref_ad_db_(\d+)$"))
async def ref_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    user_id = callback_query.from_user.id

    await callback_query.answer()
    
    user_states[user_id] = {"action": "edit_referrer", "ad_id": ad_id, "message_id": callback_query.message.id}

    await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7–•–•–•–•–•–•–•–•–•–•), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–æ–≤—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º—ã. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/clear` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")

# region call:edit_comment
@bot.on_callback_query(filters.regex(r"^edit_comment_ad_db_(\d+)$"))
@admin_only
async def edit_referrer_comment_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[4]) # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–Ω–¥–µ–∫—Å 4
    user_id = callback_query.from_user.id

    await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞ #, –Ω–∞–ø—Ä–∏–º–µ—Ä: #–ú–æ–π –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", show_alert=True)
    
    user_states[user_id] = {"action": "edit_referrer_comment", "ad_id": ad_id, "message_id": callback_query.message.id}
    
    await callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—É. –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞ `#`.")

# region Chats watchdog
@bot.on_message(filters.chat(CHAT_IDS) & (filters.text | filters.photo | filters.audio | filters.video | filters.document | filters.sticker | filters.animation | filters.voice))
async def new_message(client: Client, message: Message):
    global lock
    if message.chat.id in CHAT_IDS:
        if not lock:
            lock = True
            print(f"New message detected in {message.chat.id}. Deleting old ads and sending new ones.")
            await delete_old_ads()
            await asyncio.sleep(0.5)
            await send_ads()
            lock = False
        else:
            print(f"Lock is active, skipping ad cycle for message in {message.chat.id}.")

# region User states manager
@bot.on_message(filters.private & ~filters.command(["start", "ads", "ad", "get", "del", "adminme", "unadminme", "clear"]))
async def handle_user_state_message(client: Client, message: Message):
    user_id = message.from_user.id
    
    if user_id in user_states:
        state = user_states[user_id]
        action = state.get("action")
        ad_id = state.get("ad_id")
        original_message_id = state.get("message_id")

        if action == "edit_ad":
            photos_data = []
            text = ''

            if message.photo:
                photos_data = [{'file_id': message.photo.file_id}]
                text = message.caption if message.caption else ''
            elif message.text:
                text = message.text
            
            if not text and not photos_data:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            referrer = None
            referrer_comment = None
            processed_text_lines = []

            original_text_lines = text.splitlines()
            
            if original_text_lines and original_text_lines[-1].strip().startswith("#"):
                referrer_comment = original_text_lines[-1].strip()[1:].strip()
                original_text_lines = original_text_lines[:-1]

            if original_text_lines:
                last_line = original_text_lines[-1].strip()

                if last_line.startswith("@"):
                    referrer = last_line[1:]
                    original_text_lines = original_text_lines[:-1]
                elif re.match(r"^\+7\d{10}$", last_line):
                    referrer = last_line

            text = "\n".join(original_text_lines).strip()

            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.text = text
                    ad_to_update.photos = photos_data
                    if referrer is not None: 
                        ad_to_update.referrer = referrer
                    if referrer_comment is not None: 
                        ad_to_update.referrer_comment = referrer_comment
                    
                    db.commit()
                    await message.reply("–†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
                    await delete_old_ads()
                    await send_ads()
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            del user_states[user_id]
            try:
                if original_message_id:
                    await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

        elif action == "edit_referrer":
            new_referrer = message.text.strip()
            
            if new_referrer == "/clear":
                new_referrer = None
                await message.reply("–†–µ—Ñ–µ—Ä–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
            elif new_referrer.startswith("@"):
                new_referrer = new_referrer[1:]
                await message.reply(f"–†–µ—Ñ–µ—Ä–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: @{new_referrer}")
            elif re.match(r"^\+7\d{10}$", new_referrer):
                await message.reply(f"–†–µ—Ñ–µ—Ä–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_referrer}")
            else:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ +7–•–•–•–•–•–•–•–•–•–•, –∏–ª–∏ /clear.")
                return

            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer = new_referrer
                    db.commit()
                    await delete_old_ads()
                    await send_ads()
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
            del user_states[user_id]
            try:
                if original_message_id:
                    await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
        elif action == "edit_referrer_comment":
            new_comment_text = message.text.strip()
            if not new_comment_text.startswith("#"):
                await message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ #. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
                return
            new_comment = new_comment_text[2:].strip()

            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer_comment = new_comment
                    db.commit()
                    await message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    await delete_old_ads()
                    await send_ads()
                else:
                    await message.reply_text("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
            del user_states[user_id]
            try:
                if original_message_id:
                    await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
    pass

# region CLEAR
@bot.on_message(filters.command("clear") & filters.private)
@admin_only
async def clear_state_command(client: Client, message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        if state.get("action") == "edit_referrer":
            ad_id = state.get("ad_id")
            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer = None
                    db.commit()
                    await message.reply("–†–µ—Ñ–µ—Ä–µ—Ä –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                    await delete_old_ads()
                    await send_ads()
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await message.reply("–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
        del user_states[user_id]
        try:
            if state.get("message_id"):
                await client.delete_messages(chat_id=message.chat.id, message_ids=state["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ /clear: {e}")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞.")

# region bot.run()
if __name__ == '__main__':
    bot.run()