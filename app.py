from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery, InputMediaPhoto
from pyrogram.enums import ChatType
from models import Base, Ad, LastAds, Settings
from pyrogram import Client, filters, enums
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import NoResultFound
from sqlalchemy import create_engine
import json, asyncio, pyrofix, re
from io import BytesIO
import time

# 0 / 1
TESTMODE = 0

API_ID = 1234
API_HASH = 'your hash'

TOKEN = [
    'main',
    'test'
][TESTMODE]

NAME = [
    "main",
    "test"
][TESTMODE]

engine = create_engine(f'sqlite:///{NAME}.db')
Base.metadata.create_all(engine)
SessionLocal = sessionmaker(bind=engine)

bot = Client(NAME, api_id=API_ID, api_hash=API_HASH, bot_token=TOKEN)

user_states = {}
lock = {}

MAX_ADS = 5

last_resend_time = 0
RESEND_COOLDOWN = 10

def get_setting(key, default_value=None):
    with SessionLocal() as db:
        try:
            setting = db.query(Settings).filter(Settings.key == key).one()
            if isinstance(setting.value, str):
                try:
                    return json.loads(setting.value)
                except json.JSONDecodeError:
                    pass
            return setting.value
        except NoResultFound:
            return default_value
        except Exception as e:
            print(f"Error getting setting {key}: {e}")
            return default_value

def set_setting(key, value):
    with SessionLocal() as db:
        try:
            setting = db.query(Settings).filter(Settings.key == key).one()
            if isinstance(value, (list, dict)):
                setting.value = json.dumps(value)
            else:
                setting.value = value
        except NoResultFound:
            if isinstance(value, (list, dict)):
                new_setting = Settings(key=key, value=json.dumps(value))
            else:
                new_setting = Settings(key=key, value=value)
            db.add(new_setting)
        db.commit()

all_chats_db = get_setting('all_chats')
active_chats_db = get_setting('active_chats')

if all_chats_db is None or active_chats_db is None:
    CHAT_IDS_INITIAL = [
        [],
        []
    ][TESTMODE]
    set_setting('all_chats', CHAT_IDS_INITIAL)
    set_setting('active_chats', CHAT_IDS_INITIAL)
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –∏–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞.")

CHAT_IDS = get_setting('all_chats')
ACTIVE_CHAT_IDS = get_setting('active_chats')

admins_db = get_setting('admins')
test_admins_db = get_setting('test_admins')

if admins_db is None:
    set_setting('admins', [])
if test_admins_db is None:
    set_setting('test_admins', [])
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª —Å–ø–∏—Å–∫–∏ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ —Ö–∞—Ä–¥–∫–æ–¥–∞.")

ADMINS = get_setting('admins' if TESTMODE == 0 else 'test_admins')

lock = {cid: False for cid in ACTIVE_CHAT_IDS}
print(f"–ê–¥–º–∏–Ω—ã: {ADMINS}")
print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {ACTIVE_CHAT_IDS}")
print(f"–í—Å–µ —á–∞—Ç—ã: {CHAT_IDS}")

def admin_only(func):
    async def wrapper(client: Client, message: Message):
        if message.from_user.id in ADMINS:
            return await func(client, message)
        else:
            await message.reply("üö´ Admin only", quote=True)
            return
    return wrapper

def admin_only_callback(func):
    async def wrapper(client: Client, callback_query: CallbackQuery):
        if callback_query.from_user.id in ADMINS:
            return await func(client, callback_query)
        else:
            await callback_query.answer("üö´ Admin only")
    return wrapper

def testmode_only(func):
    async def wrapper(client: Client, message: Message):
        if TESTMODE:
            return await func(client, message)
        else:
            await message.reply("üö´ In test only", quote=True)
            return
    return wrapper

def pm_only(func):
    async def wrapper(client: Client, message: Message):
        if message.chat.type == enums.ChatType.PRIVATE:
            return await func(client, message)
        else:
            await message.reply("üö´ PM only", quote=True)
            return
    return wrapper

async def send_ads(CHAT_ID):
    with SessionLocal() as db:
        ads_from_db = db.query(Ad).all()
        last_ads_in_chat = []
        for ad in ads_from_db:
            ad_buttons = []
            if ad.referrer:
                if ad.referrer.startswith("+"):
                    ref = ad.referrer[:5]+'*****'+ad.referrer[10:]
                else:
                    ref = "@"+ad.referrer
                ad_buttons.append([InlineKeyboardButton(f"‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å ({ref})", url=f"https://t.me/{ad.referrer}")])
                if ad.referrer.startswith("+"):
                    ad_buttons.append([InlineKeyboardButton(f"üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å ({ref})", url=f"https://t.me/{bot.me.username}?start=contact_ad_{ad.id}")])

            reply_markup = InlineKeyboardMarkup(ad_buttons) if ad_buttons else None
            try:
                if ad.photos:
                    media_group = [InputMediaPhoto(media=photo['file_id']) for photo in ad.photos]
                    if media_group:
                        media_group[0].caption = ad.text
                        sent_messages = await bot.send_media_group(chat_id=CHAT_ID, media=media_group)
                        if reply_markup and sent_messages:
                            await sent_messages[0].edit_reply_markup(reply_markup=reply_markup)
                        last_ads_in_chat.extend([msg.id for msg in sent_messages])
                else:
                    sent_message = await bot.send_message(chat_id=CHAT_ID, text=ad.text, reply_markup=reply_markup)
                    last_ads_in_chat.append(sent_message.id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (ID: {ad.id}) –≤ —á–∞—Ç {CHAT_ID}: {e}")
                raise
        
        last_ad_entry = db.query(LastAds).filter(LastAds.chat_id == CHAT_ID).first()
        if last_ad_entry:
            last_ad_entry.messages = last_ads_in_chat
        else:
            new_last_ad_entry = LastAds(chat_id=CHAT_ID, messages=last_ads_in_chat)
            db.add(new_last_ad_entry)
        db.commit()

async def delete_old_ads(CHAT_ID):
    with SessionLocal() as db:
        last_ads_entry = db.query(LastAds).filter(LastAds.chat_id == CHAT_ID).first()
        if last_ads_entry and last_ads_entry.messages:
            for message_id in last_ads_entry.messages:
                try:
                    await bot.delete_messages(chat_id=CHAT_ID, message_ids=message_id)
                except Exception as e:
                    print(f"Error deleting message {message_id} in chat {CHAT_ID}: {e}")
            db.delete(last_ads_entry)
            db.commit()

@bot.on_message(filters.command("admin") & filters.private)
@admin_only
async def add_admin_command(client: Client, message: Message):
    global ADMINS
    try:
        user_id = int(message.command[1])
        if user_id not in ADMINS:
            ADMINS.append(user_id)
            set_setting('admins' if TESTMODE == 0 else 'test_admins', ADMINS)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
        else:
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin <user_id>`")

@bot.on_message(filters.command("unadmin") & filters.private)
@admin_only
async def remove_admin_command(client: Client, message: Message):
    global ADMINS
    try:
        user_id = int(message.command[1])
        if user_id in ADMINS:
            ADMINS.remove(user_id)
            set_setting('admins' if TESTMODE == 0 else 'test_admins', ADMINS)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        else:
            await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.")
    except (IndexError, ValueError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unadmin <user_id>`")

@bot.on_message(filters.command("adminme"))
@testmode_only
async def adminme(client: Client, message: Message):
    global ADMINS
    if message.from_user.id not in ADMINS:
        ADMINS.append(message.from_user.id)
        set_setting('admins' if TESTMODE == 0 else 'test_admins', ADMINS)
        await message.reply("‚úÖ Done", quote=True)
    else:
        await message.reply("üö´ You are already an admin", quote=True)

@bot.on_message(filters.command("unadminme"))
@testmode_only
@admin_only
async def unadminme(client: Client, message: Message):
    global ADMINS
    if message.from_user.id in ADMINS:
        ADMINS.remove(message.from_user.id)
        set_setting('admins' if TESTMODE == 0 else 'test_admins', ADMINS)
        await message.reply("‚úÖ Done", quote=True)
    else:
        await message.reply("üö´ You are not an admin", quote=True)

@bot.on_message(filters.command("del"))
@admin_only
@pm_only
async def del_message_command(client: Client, message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("Use: `del <chat_id> <msg_id>`")
        chat = int(parts[1])
        msg_id = int(parts[2])
    except (IndexError, ValueError):
        return await message.reply("Use: `del <chat_id> <msg_id>`")

    if chat not in CHAT_IDS:
        await message.reply(f"Chat `{chat}` not in `CHAT_IDS` list.")
        return
    try:
        await client.delete_messages(chat_id=chat, message_ids=msg_id)
        await message.reply("Message deleted.")
    except Exception as e:
        await message.reply(f"Error deleting message: {e}")

@bot.on_message(filters.command("get"))
@pm_only
@admin_only
async def get_message_data_command(client: Client, message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            return await message.reply("Use: `get <chat_id> <msg_id>`")
        chat = int(parts[1])
        msg_id = int(parts[2])
    except (IndexError, ValueError):
        return await message.reply("Use: `get <chat_id> <msg_id>`")
    
    if chat not in CHAT_IDS:
        await message.reply(f"Chat `{chat}` not in `CHAT_IDS` list.")
        return

    try:
        target_message = await client.get_messages(chat, msg_id)
    except Exception as e:
        return await message.reply(f"No message with id: {e}")

    def serialize(obj):
        if isinstance(obj, (str, int, float, bool, type(None))):
            return obj
        elif isinstance(obj, (list, tuple)):
            return [serialize(item) for item in obj]
        elif isinstance(obj, dict):
            return {k: serialize(v) for k, v in obj.items() if not k.startswith("_")}
        elif hasattr(obj, "__dict__"):
            return serialize(obj.__dict__)
        else:
            try:
                return str(obj)
            except:
                return "<unserializable>"

    clean_data = serialize(target_message)
    file_io = BytesIO()
    file_io.name = "get.json"
    file_io.write(json.dumps(clean_data, indent=2, ensure_ascii=False).encode("utf-8"))
    file_io.seek(0)
    await message.reply_document(file_io, caption=f"Message [#{msg_id}](https://t.me/c/{str(chat).lstrip('-100')}/{msg_id})")

@bot.on_message(filters.command("start"))
@pm_only
async def start_command(client: Client, message: Message):
    command_parts = message.command if message.command else []
    ad_id = -1
    if len(command_parts) > 1 and command_parts[0] == "start" and command_parts[1].startswith("contact_ad_"):
        try:
            ad_id = int(command_parts[1].split('_')[2])
            with SessionLocal() as db:
                ad = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad and ad.referrer and re.match(r"^\+7\d{10}$", ad.referrer):
                    response_text = f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è \"__{ad.text.splitlines()[0]}__\": {ad.referrer}\n\n"
                    if ad.referrer_comment:
                        response_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: __{ad.referrer_comment}__\n\n"
                    response_text += f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –Ω–∞–ø–∏—Å–∞—Ç—å/–ø–æ–∑–≤–æ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—é"

                    await message.reply(
                        response_text,
                        disable_web_page_preview=True
                    )
                else:
                    await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
                user = message.from_user
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={user.id}")],
                    [InlineKeyboardButton("üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data=f'ad_view_{ad_id}')]
                ])
                for admin_id in ADMINS:
                    try:
                        st = str(ad.id)+' | __'+ad.text.splitlines()[0]+'__' if ad_id != -1 else ''
                        await client.send_message(admin_id, f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é:\n{st}\n{'‚≠ê ' if user.is_premium else ''}{user.first_name} {user.last_name or ''}{' // @'+user.username+' // ' if user.username else ' // '}`{user.id}`", reply_markup=keyboard)
                    except Exception as e:
                        print(f"Could not send start message to admin {admin_id}: {e}")
            return
        except (ValueError, IndexError):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

    if message.from_user.id in ADMINS:
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n\n// Creator: @NoBanOnlyZXC')
    else:
        user = message.from_user
        await message.reply(f"üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n\n(ad) üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤–Ω–∏–∑—É —á–∞—Ç–∞ –∑–∞ 200—Ä—É–± / –¥–µ–Ω—å")
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", url=f"tg://user?id={user.id}")]
        ])
        for admin_id in ADMINS:
            try:
                await client.send_message(admin_id, f"‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start\n{'‚≠ê ' if user.is_premium else ''}{user.first_name} {user.last_name or ''}{' // @'+user.username+' // ' if user.username else ' // '}`{user.id}`", reply_markup=keyboard)
            except Exception as e:
                print(f"Could not send start message to admin {admin_id}: {e}")

@bot.on_message(filters.command("ad") & filters.reply)
@pm_only
@admin_only
async def add_ad_command(client: Client, message: Message):
    reply_to = message.reply_to_message
    if reply_to:
        photos = []
        text = ''
        
        if reply_to.media_group_id:
            mg = await reply_to.get_media_group()
            for pic in mg:
                photos.append({'file_id': pic.photo.file_id})
                text = pic.caption if pic.caption else (pic.text if pic.text else text)

        elif reply_to.photo:
            photo = reply_to.photo.file_id
            photos = [{'file_id': photo}]
            text = reply_to.caption if reply_to.caption else (reply_to.text if reply_to.text else text)
        elif reply_to.text:
            text = reply_to.text
        
        if not text and not photos:
            await message.reply("The replied message must contain text or a photo.")
            return

        referrer = None
        referrer_comment = None 
        original_text_lines = text.splitlines()

        if original_text_lines and original_text_lines[-2].strip().startswith("# "):
            referrer_comment = original_text_lines[-2].strip()[2:].strip()
            original_text_lines = original_text_lines[:-2]

        if original_text_lines:
            last_line = text.splitlines()[-1].strip()
            print(last_line)

            if last_line.startswith("@"):
                referrer = last_line[1:]
                original_text_lines = original_text_lines[:-1]
            elif last_line.startswith("+"):
                referrer = last_line

        text = "\n".join(original_text_lines).strip()

        with SessionLocal() as db:
            current_ads_count = db.query(Ad).count()
            if current_ads_count >= MAX_ADS:
                oldest_ad = db.query(Ad).order_by(Ad.date_added).first()
                if oldest_ad:
                    db.delete(oldest_ad)
                    db.commit()
            
            new_ad = Ad(
                text=text,
                photos=photos,
                referrer=referrer,
                referrer_comment=referrer_comment,
                admin_added=message.from_user.id
            )
            db.add(new_ad)
            db.commit()
            db.refresh(new_ad)

        for chat in ACTIVE_CHAT_IDS:
            await delete_old_ads(chat)
            await asyncio.sleep(0.5)
            await send_ads(chat)
        await message.reply('–†–µ–∫–ª–∞–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')


@bot.on_message(filters.command("ads"))
@pm_only
@admin_only
async def ads_list_command(client: Client, message: Message):
    with SessionLocal() as db:
        ads_from_db = db.query(Ad).all()
        if len(ads_from_db) > 0:
            keyboard = InlineKeyboardMarkup([])
            for i, ad_item in enumerate(ads_from_db):
                marks = f'{"üë§" if ad_item.referrer else ""}{"üìù" if ad_item.referrer_comment else ""}{"üñºÔ∏è"*len(ad_item.photos) if ad_item.photos else ""}'
                t = (ad_item.text[:27] + '...') if ad_item.text and len(ad_item.text) > 27 else (ad_item.text or "No text")
                button_text = f'{marks} {" | " if marks else ""} {t}'
                keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f'ad_view_{ad_item.id}')])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîÑÔ∏è –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data='resend_ads')])
            await message.reply('**–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞**\nüë§ –ù–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\nüìù –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\nüñºÔ∏è –ù–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫', reply_markup=keyboard)
        else:
            await message.reply('–ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã.')

async def update_chats_message(client: Client, query_object):
    is_callback = isinstance(query_object, CallbackQuery)
    message = query_object.message if is_callback else query_object

    temp_message = message if not is_callback else None
    
    if is_callback:
        await query_object.answer("–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...")
    else:
        temp_message = await message.reply("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö...")

    keyboard_buttons = []
    
    all_chats_db = get_setting('all_chats', [])
    active_chats_db = get_setting('active_chats', [])
    
    if not all_chats_db:
        if temp_message: await temp_message.edit_text("–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    
    for chat_id in all_chats_db:
        try:
            chat = await client.get_chat(chat_id)
            chat_name = chat.title if chat.title else chat.first_name
            chat_type_display = chat.type.name.capitalize()
            
            is_active = chat.id in active_chats_db
            status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            # action_text = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            callback_data = f"togglechat_{chat.id}"
            
            row_actions = []
            if chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
                row_actions.append(InlineKeyboardButton("–ü–æ–∫–∏–Ω—É—Ç—å", callback_data=f"leavechat_{chat.id}"))
            
            row_actions.append(InlineKeyboardButton(status_text, callback_data=callback_data))
            
            keyboard_buttons.append([InlineKeyboardButton(f"{chat_name} (ID: {chat.id} | –¢–∏–ø: {chat_type_display})", callback_data="ignore")])
            # keyboard_buttons.append([InlineKeyboardButton(status_text, callback_data="ignore")])
            keyboard_buttons.append(row_actions)
            
        except Exception as e:
            keyboard_buttons.append([InlineKeyboardButton(f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —á–∞—Ç (ID: {chat_id})", callback_data="ignore")])
            keyboard_buttons.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data=f"remove_from_all_{chat_id}")])
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")

    if not keyboard_buttons:
        if temp_message: await temp_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É —á–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    if is_callback:
        await message.edit_text("–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —á–∞—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard_buttons))
    else:
        await temp_message.edit_text("–°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —á–∞—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard_buttons))

@bot.on_message(filters.command("chats"))
@pm_only
@admin_only
async def chatslist(client: Client, message: Message):
    await update_chats_message(client, message)

@bot.on_message(filters.new_chat_members)
async def new_chat_members_handler(client: Client, message: Message):
    global CHAT_IDS, ACTIVE_CHAT_IDS
    for member in message.new_chat_members:
        if member.id == client.me.id:
            chat_id = message.chat.id
            
            all_chats_db = get_setting('all_chats', [])
            if chat_id not in all_chats_db:
                all_chats_db.append(chat_id)
                set_setting('all_chats', all_chats_db)
                CHAT_IDS = all_chats_db
            
            print(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç! ID: {chat_id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}")
            for admin_id in ADMINS:
                try:
                    await client.send_message(admin_id, f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π —á–∞—Ç\nID: {chat_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}")
                except Exception as e:
                    print(f"Could not send start message to admin {admin_id}: {e}")
            await message.reply(f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ —á–∞—Ç!\n–≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö.")

@bot.on_callback_query(filters.regex(r"^ad_view_(\d+)$"))
async def ad_view_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[2])
    try:
        if not callback_query.message.text.startswith("‚ùó–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª /start –ø–æ –æ–±—å—è–≤–ª–µ–Ω–∏—é"):
            await callback_query.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    with SessionLocal() as db:
        ad = db.query(Ad).filter(Ad.id == ad_id).first()
        if ad:
            kb1 = InlineKeyboardMarkup([
                [InlineKeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É', callback_data=f'delete_ad_db_{ad_id}')],
                [InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–ª–∞–º—É', callback_data=f'edit_ad_db_{ad_id}')],
                [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞', callback_data=f'ref_ad_db_{ad_id}')],
                [InlineKeyboardButton('üí¨ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'edit_comment_ad_db_{ad_id}')]
            ])
            try:
                if ad.photos:
                    if isinstance(ad.photos, list) and ad.photos and 'file_id' in ad.photos[0]:
                        await client.send_photo(
                            chat_id=callback_query.message.chat.id,
                            photo=ad.photos[0]['file_id'],
                            caption=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                            reply_markup=kb1
                        )
                    else:
                        await client.send_message(
                            chat_id=callback_query.message.chat.id,
                            text=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–û—à–∏–±–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ)",
                            reply_markup=kb1
                        )
                else:
                    await client.send_message(
                        chat_id=callback_query.message.chat.id,
                        text=ad.text or "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                        reply_markup=kb1
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–ª–∞–º—ã: {e}")
                await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É.")
                await client.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã: {e}"
                )
        else:
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.on_callback_query(filters.regex(r"^delete_ad_db_(\d+)$"))
async def delete_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    with SessionLocal() as db:
        ad_to_delete = db.query(Ad).filter(Ad.id == ad_id).first()
        if ad_to_delete:
            db.delete(ad_to_delete)
            db.commit()
            for chat in ACTIVE_CHAT_IDS:
                await delete_old_ads(chat)
                await send_ads(chat)
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞")
            await callback_query.message.delete()
            
            ads_from_db = db.query(Ad).all()
            if len(ads_from_db) > 0:
                keyboard = InlineKeyboardMarkup([])
                for i, ad_item in enumerate(ads_from_db):
                    marks = f'{"üë§" if ad_item.referrer else ""}{"üìù" if ad_item.referrer_comment else ""}{"üñºÔ∏è"*len(ad_item.photos) if ad_item.photos else ""}'
                    t = (ad_item.text[:27] + '...') if ad_item.text and len(ad_item.text) > 27 else (ad_item.text or "No text")
                    button_text = f'{marks} {" | " if marks else ""} {t}'
                    keyboard.inline_keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f'ad_view_{ad_item.id}')])
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîÑÔ∏è –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data='resend_ads')])
                await callback_query.message.reply('**–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞**\nüë§ - –ù–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞\nüìù - –ù–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\nüñºÔ∏è - –ù–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫', reply_markup=keyboard)
            else:
                await callback_query.message.reply('–ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã.')
        else:
            await callback_query.answer("–†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await callback_query.message.delete()

@bot.on_callback_query(filters.regex(r"^edit_ad_db_(\d+)$"))
@admin_only_callback
async def edit_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    user_id = callback_query.from_user.id
    await callback_query.answer()
    user_states[user_id] = {"action": "edit_ad", "ad_id": ad_id, "message_id": callback_query.message.id}
    await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.")

@bot.on_callback_query(filters.regex(r"^ref_ad_db_(\d+)$"))
@admin_only_callback
async def ref_ad_db_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[3])
    user_id = callback_query.from_user.id
    await callback_query.answer()
    user_states[user_id] = {"action": "edit_referrer", "ad_id": ad_id, "message_id": callback_query.message.id}
    await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7–•–•–•–•–•–•–•–•–•–•), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–æ–≤—ã–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º—ã. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/clear` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞.")

@bot.on_callback_query(filters.regex(r"^edit_comment_ad_db_(\d+)$"))
@admin_only_callback
async def edit_referrer_comment_callback(client: Client, callback_query: CallbackQuery):
    ad_id = int(callback_query.data.split('_')[4])
    user_id = callback_query.from_user.id
    await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞ \"# \", –Ω–∞–ø—Ä–∏–º–µ—Ä: # –ú–æ–π –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    user_states[user_id] = {"action": "edit_referrer_comment", "ad_id": ad_id, "message_id": callback_query.message.id}
    await callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—É. –û–Ω –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞ \"# \".")

@bot.on_callback_query(filters.regex(r"^togglechat_(\-?\d+)$"))
@admin_only_callback
async def toggle_chat_callback(client: Client, callback_query: CallbackQuery):
    global ACTIVE_CHAT_IDS, lock
    chat_id = int(callback_query.matches[0].group(1))
    active_chats_db = get_setting('active_chats', [])

    if chat_id in active_chats_db:
        active_chats_db.remove(chat_id)
        message = f"–ß–∞—Ç `{chat_id}` –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
        await delete_old_ads(chat_id) 
    else:
        active_chats_db.append(chat_id)
        message = f"–ß–∞—Ç `{chat_id}` –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
        await delete_old_ads(chat_id)
        await asyncio.sleep(0.5)
        await send_ads(chat_id)

    set_setting('active_chats', active_chats_db)
    ACTIVE_CHAT_IDS = active_chats_db
    lock = {cid: False for cid in ACTIVE_CHAT_IDS}

    await callback_query.answer(message)
    await update_chats_message(client, callback_query)

@bot.on_callback_query(filters.regex(r"^leavechat_(\-?\d+)$"))
@admin_only_callback
async def leave_chat_callback(client: Client, callback_query: CallbackQuery):
    global CHAT_IDS, ACTIVE_CHAT_IDS, lock
    chat_id = int(callback_query.matches[0].group(1))
    
    try:
        await client.leave_chat(chat_id)
        
        all_chats_db = get_setting('all_chats', [])
        if chat_id in all_chats_db:
            all_chats_db.remove(chat_id)
            set_setting('all_chats', all_chats_db)
            CHAT_IDS = all_chats_db

        active_chats_db = get_setting('active_chats', [])
        if chat_id in active_chats_db:
            active_chats_db.remove(chat_id)
            set_setting('active_chats', active_chats_db)
            ACTIVE_CHAT_IDS = active_chats_db
            
        lock = {cid: False for cid in ACTIVE_CHAT_IDS}
        
        await callback_query.answer(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç: {chat_id} –∏ —É–¥–∞–ª–∏–ª –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        await update_chats_message(client, callback_query)

    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç: {e}")
        
@bot.on_callback_query(filters.regex(r"^remove_from_all_(\-?\d+)$"))
@admin_only_callback
async def remove_from_all_callback(client: Client, callback_query: CallbackQuery):
    global CHAT_IDS, ACTIVE_CHAT_IDS
    chat_id = int(callback_query.matches[0].group(1))
    
    all_chats_db = get_setting('all_chats', [])
    if chat_id in all_chats_db:
        all_chats_db.remove(chat_id)
        set_setting('all_chats', all_chats_db)
        CHAT_IDS = all_chats_db
    
    active_chats_db = get_setting('active_chats', [])
    if chat_id in active_chats_db:
        active_chats_db.remove(chat_id)
        set_setting('active_chats', active_chats_db)
        ACTIVE_CHAT_IDS = active_chats_db

    await callback_query.answer(f"–ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.")
    await update_chats_message(client, callback_query)

@bot.on_callback_query(filters.regex("^resend_ads$"))
@admin_only_callback
async def resend_ads_callback(client: Client, callback_query: CallbackQuery):
    global last_resend_time, RESEND_COOLDOWN
    current_time = time.time()

    if current_time - last_resend_time < RESEND_COOLDOWN:
        remaining_time = int(RESEND_COOLDOWN - (current_time - last_resend_time))
        await callback_query.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π.", show_alert=True)
        return

    last_resend_time = current_time

    await callback_query.answer("–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∫–ª–∞–º—É –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã...")
    for chat in ACTIVE_CHAT_IDS:
        await delete_old_ads(chat)
        await asyncio.sleep(0.5)
        await send_ads(chat)
    await callback_query.message.reply("–†–µ–∫–ª–∞–º–∞ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.")

@bot.on_message((filters.group) & (filters.text | filters.photo | filters.audio | filters.video | filters.document | filters.sticker | filters.animation | filters.voice))
async def new_message(client: Client, message: Message):
    global lock, ACTIVE_CHAT_IDS
    chat_id = message.chat.id
    
    if chat_id not in ACTIVE_CHAT_IDS:
        return

    if not lock.get(chat_id, False):
        lock[chat_id] = True
        print(f"New message detected in {chat_id}. Deleting old ads and sending new ones.")
        try:
            await delete_old_ads(chat_id)
            await asyncio.sleep(0.5)
            await send_ads(chat_id)
        except Exception as e:
            print(f"Error in ad cycle for chat {chat_id}: {e}")
        finally:
            lock[chat_id] = False
    else:
        print(f"Lock is active, skipping ad cycle for message in {chat_id}.")

@bot.on_message(filters.private & ~filters.command(["start", "ads", "ad", "get", "del", "adminme", "unadminme", "clear", "admin", "unadmin", "chats"]))
async def handle_user_state_message(client: Client, message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        action = state.get("action")
        ad_id = state.get("ad_id")
        original_message_id = state.get("message_id")

        if action == "edit_ad":
            photos_data = []
            text = ''
            if message.photo:
                photos_data = [{'file_id': message.photo.file_id}]
                text = message.caption if message.caption else ''
            elif message.text:
                text = message.text
            
            if not text and not photos_data:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            referrer = None
            referrer_comment = None
            original_text_lines = text.splitlines()
            
            if original_text_lines and original_text_lines[-1].strip().startswith("#"):
                referrer_comment = original_text_lines[-1].strip()[1:].strip()
                original_text_lines = original_text_lines[:-1]
            if original_text_lines:
                last_line = original_text_lines[-1].strip()
                if last_line.startswith("@"):
                    referrer = last_line[1:]
                    original_text_lines = original_text_lines[:-1]
                elif re.match(r"^\+7\d{10}$", last_line):
                    referrer = last_line
            text = "\n".join(original_text_lines).strip()

            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.text = text
                    ad_to_update.photos = photos_data
                    if referrer is not None: ad_to_update.referrer = referrer
                    if referrer_comment is not None: ad_to_update.referrer_comment = referrer_comment
                    db.commit()
                    await message.reply("–†–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
                    for chat in ACTIVE_CHAT_IDS:
                        await delete_old_ads(chat)
                        await send_ads(chat)
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            del user_states[user_id]
            try:
                if original_message_id: await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

        elif action == "edit_referrer":
            new_referrer = message.text.strip()
            if new_referrer == "/clear": new_referrer = None
            elif new_referrer.startswith("@"): new_referrer = new_referrer[1:]
            elif not re.match(r"^\+7\d{10}$", new_referrer):
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username, +7–•–•–•–•–•–•–•–•–•–•, –∏–ª–∏ /clear.")
                return
            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer = new_referrer
                    db.commit()
                    await message.reply(f"–†–µ—Ñ–µ—Ä–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_referrer if new_referrer else '–Ω–µ—Ç'}")
                    for chat in ACTIVE_CHAT_IDS:
                        await delete_old_ads(chat)
                        await send_ads(chat)
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            del user_states[user_id]
            try:
                if original_message_id: await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
        elif action == "edit_referrer_comment":
            new_comment_text = message.text.strip()
            if not new_comment_text.startswith("#"):
                await message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ #. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            new_comment = new_comment_text[1:].strip()
            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer_comment = new_comment
                    db.commit()
                    await message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    for chat in ACTIVE_CHAT_IDS:
                        await delete_old_ads(chat)
                        await send_ads(chat)
                else:
                    await message.reply_text("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            del user_states[user_id]
            try:
                if original_message_id: await client.delete_messages(chat_id=message.chat.id, message_ids=original_message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ads` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ `/chats` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏.", quote=True)


@bot.on_message(filters.command("clear") & filters.private)
@admin_only
async def clear_state_command(client: Client, message: Message):
    user_id = message.from_user.id
    if user_id in user_states:
        state = user_states[user_id]
        if state.get("action") == "edit_referrer" and message.text == "/clear":
            ad_id = state.get("ad_id")
            with SessionLocal() as db:
                ad_to_update = db.query(Ad).filter(Ad.id == ad_id).first()
                if ad_to_update:
                    ad_to_update.referrer = None
                    db.commit()
                    await message.reply("–†–µ—Ñ–µ—Ä–µ—Ä –¥–ª—è —ç—Ç–æ–π —Ä–µ–∫–ª–∞–º—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                    for chat in ACTIVE_CHAT_IDS:
                        await delete_old_ads(chat)
                        await send_ads(chat)
                else:
                    await message.reply("–û—à–∏–±–∫–∞: –†–µ–∫–ª–∞–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await message.reply("–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ.")
        del user_states[user_id]
        try:
            if state.get("message_id"):
                await client.delete_messages(chat_id=message.chat.id, message_ids=state["message_id"])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ /clear: {e}")
    else:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–±—Ä–æ—Å–∞.")

if __name__ == '__main__':
    bot.run()